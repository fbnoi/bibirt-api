// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterAsAnonymousRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAsAnonymousRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAsAnonymousRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAsAnonymousRequestMultiError, or nil if none found.
func (m *RegisterAsAnonymousRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAsAnonymousRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterAsAnonymousRequestMultiError(errors)
	}

	return nil
}

// RegisterAsAnonymousRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterAsAnonymousRequest.ValidateAll() if
// the designated constraints aren't met.
type RegisterAsAnonymousRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAsAnonymousRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAsAnonymousRequestMultiError) AllErrors() []error { return m }

// RegisterAsAnonymousRequestValidationError is the validation error returned
// by RegisterAsAnonymousRequest.Validate if the designated constraints aren't met.
type RegisterAsAnonymousRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAsAnonymousRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAsAnonymousRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAsAnonymousRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAsAnonymousRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAsAnonymousRequestValidationError) ErrorName() string {
	return "RegisterAsAnonymousRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAsAnonymousRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAsAnonymousRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAsAnonymousRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAsAnonymousRequestValidationError{}

// Validate checks the field values on RegisterAsAnonymousReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAsAnonymousReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAsAnonymousReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAsAnonymousReplyMultiError, or nil if none found.
func (m *RegisterAsAnonymousReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAsAnonymousReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RegisterAsAnonymousReplyMultiError(errors)
	}

	return nil
}

// RegisterAsAnonymousReplyMultiError is an error wrapping multiple validation
// errors returned by RegisterAsAnonymousReply.ValidateAll() if the designated
// constraints aren't met.
type RegisterAsAnonymousReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAsAnonymousReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAsAnonymousReplyMultiError) AllErrors() []error { return m }

// RegisterAsAnonymousReplyValidationError is the validation error returned by
// RegisterAsAnonymousReply.Validate if the designated constraints aren't met.
type RegisterAsAnonymousReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAsAnonymousReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAsAnonymousReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAsAnonymousReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAsAnonymousReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAsAnonymousReplyValidationError) ErrorName() string {
	return "RegisterAsAnonymousReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAsAnonymousReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAsAnonymousReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAsAnonymousReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAsAnonymousReplyValidationError{}

// Validate checks the field values on WSTokenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WSTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WSTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WSTokenRequestMultiError,
// or nil if none found.
func (m *WSTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WSTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := WSTokenRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WSTokenRequestMultiError(errors)
	}

	return nil
}

// WSTokenRequestMultiError is an error wrapping multiple validation errors
// returned by WSTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type WSTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WSTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WSTokenRequestMultiError) AllErrors() []error { return m }

// WSTokenRequestValidationError is the validation error returned by
// WSTokenRequest.Validate if the designated constraints aren't met.
type WSTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WSTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WSTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WSTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WSTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WSTokenRequestValidationError) ErrorName() string { return "WSTokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e WSTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWSTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WSTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WSTokenRequestValidationError{}

// Validate checks the field values on WSTokenReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WSTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WSTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WSTokenReplyMultiError, or
// nil if none found.
func (m *WSTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WSTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return WSTokenReplyMultiError(errors)
	}

	return nil
}

// WSTokenReplyMultiError is an error wrapping multiple validation errors
// returned by WSTokenReply.ValidateAll() if the designated constraints aren't met.
type WSTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WSTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WSTokenReplyMultiError) AllErrors() []error { return m }

// WSTokenReplyValidationError is the validation error returned by
// WSTokenReply.Validate if the designated constraints aren't met.
type WSTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WSTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WSTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WSTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WSTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WSTokenReplyValidationError) ErrorName() string { return "WSTokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e WSTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWSTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WSTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WSTokenReplyValidationError{}

// Validate checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRequestMultiError, or nil if none found.
func (m *RefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRefreshToken()) < 1 {
		err := RefreshTokenRequestValidationError{
			field:  "RefreshToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefreshTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRequestMultiError) AllErrors() []error { return m }

// RefreshTokenRequestValidationError is the validation error returned by
// RefreshTokenRequest.Validate if the designated constraints aren't met.
type RefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRequestValidationError) ErrorName() string {
	return "RefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRequestValidationError{}

// Validate checks the field values on RefreshTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenReplyMultiError, or nil if none found.
func (m *RefreshTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return RefreshTokenReplyMultiError(errors)
	}

	return nil
}

// RefreshTokenReplyMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenReply.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenReplyMultiError) AllErrors() []error { return m }

// RefreshTokenReplyValidationError is the validation error returned by
// RefreshTokenReply.Validate if the designated constraints aren't met.
type RefreshTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenReplyValidationError) ErrorName() string {
	return "RefreshTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenReplyValidationError{}

// Validate checks the field values on ValidateWSTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateWSTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateWSTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateWSTokenRequestMultiError, or nil if none found.
func (m *ValidateWSTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateWSTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := ValidateWSTokenRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ValidateWSTokenRequestMultiError(errors)
	}

	return nil
}

// ValidateWSTokenRequestMultiError is an error wrapping multiple validation
// errors returned by ValidateWSTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type ValidateWSTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateWSTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateWSTokenRequestMultiError) AllErrors() []error { return m }

// ValidateWSTokenRequestValidationError is the validation error returned by
// ValidateWSTokenRequest.Validate if the designated constraints aren't met.
type ValidateWSTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateWSTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateWSTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateWSTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateWSTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateWSTokenRequestValidationError) ErrorName() string {
	return "ValidateWSTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateWSTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateWSTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateWSTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateWSTokenRequestValidationError{}

// Validate checks the field values on ValidateWSTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateWSTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateWSTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateWSTokenReplyMultiError, or nil if none found.
func (m *ValidateWSTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateWSTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return ValidateWSTokenReplyMultiError(errors)
	}

	return nil
}

// ValidateWSTokenReplyMultiError is an error wrapping multiple validation
// errors returned by ValidateWSTokenReply.ValidateAll() if the designated
// constraints aren't met.
type ValidateWSTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateWSTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateWSTokenReplyMultiError) AllErrors() []error { return m }

// ValidateWSTokenReplyValidationError is the validation error returned by
// ValidateWSTokenReply.Validate if the designated constraints aren't met.
type ValidateWSTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateWSTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateWSTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateWSTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateWSTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateWSTokenReplyValidationError) ErrorName() string {
	return "ValidateWSTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateWSTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateWSTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateWSTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateWSTokenReplyValidationError{}
